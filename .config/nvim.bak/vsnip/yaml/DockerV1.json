{
"Docker": {
"prefix": "adoDocker1",
"body": [
"- task: Docker@1",
"  inputs:",
"    containerregistrytype: ${1:Azure Container Registry} # Options: 'Azure Container Registry', 'Container Registry' # Required  # Select 'Azure Container Registry' to connect to it by using an Azure Service Connection. Select 'Container registry' to connect to Docker Hub or any other private container registry.",
"    #addBaseImageData:  # Optional  # By default base image data like base image name and digest are added which helps with traceability. You can opt out of this default behavior by using this input.",
"    #dockerRegistryEndpoint:  # Optional  # Select a Docker registry service connection. Required for commands that need to authenticate with a registry.",
"    #azureSubscriptionEndpoint:  # Optional  # Select an Azure subscription",
"    #azureContainerRegistry:  # Optional  # Select an Azure Container Registry in the selected Azure Subscription. The container image will be built and pushed to this container registry.",
"    command: ${2:Build an image} # Options: 'Build an image', 'Tag image', 'Push an image', 'Run an image', 'login', 'logout' # Required  # Select a Docker command.",
"    dockerFile: ${3:**/Dockerfile}  # Required  # Path to the Dockerfile.",
"    #arguments:  # Optional  # Docker command options. In case of 'tag' command, you can specify additional tags for Docker image here.",
"    #pushMultipleImages:  # Optional  # Push multiple images by using a text file that contains the names of the Docker images to push. Each image name is contained on its own line.<br>For example:<br>  Imagename1:tag1<br>  Imagename2:tag2<br>  Imagename3<br>In case only image name is provided,  all tags of the ImageName3 container image will be pushed.",
"    #tagMultipleImages:  # Optional  # Tag multiple images by using a text file that contains the names of the Docker images to tag. Each image name is contained on its own line.<br>For example:<br>  Imagename1:tag1<br>  Imagename2:tag2<br>  Imagename3<br>In case only image name is provided, that image will be tagged as 'latest'.",
"    imageName: ${4:$(Build.Repository.Name):$(Build.BuildId)}  # Required  # Name of the Docker image to build, push, or run.",
"    imageNamesPath: $5  # Required when tagMultipleImages = true || pushMultipleImages = true  # Path to a text file that contains the names of the Docker images to tag or push. Each image name is contained on its own line.",
"    #qualifyImageName:  # Optional  # Qualify the image name with the Docker registry service connection's hostname if not otherwise specified.",
"    #qualifySourceImageName:  # Optional  # Qualify the source image name with the Docker registry service connection's hostname if not otherwise specified.",
"    #includeSourceTags:  # Optional  # Include Git tags when building or pushing the Docker image.",
"    #includeLatestTag:  # Optional  # Include the 'latest' tag when building the Docker image.",
"    #addDefaultLabels:  # Optional  # Add CI/CD metadata like repository, commit, build and release information to the container image by using Docker labels.",
"    #useDefaultContext:  # Optional  # Set the build context to the directory that contains the Dockerfile.",
"    #buildContext:  # Optional  # Path to the build context.",
"    #imageDigestFile:  # Optional  # Path to a file that is created and populated with the full image repository digest of the Docker image that was pushed.",
"    #containerName:  # Optional  # Name of the Docker container to run.",
"    #ports:  # Optional  # Ports in the Docker container to publish to the host. Specify each host-port:container-port binding on a new line.",
"    #volumes:  # Optional  # Volumes to mount from the host. Specify each host-dir:container-dir on a new line.",
"    #envVars:  # Optional  # Environment variables for the Docker container. Specify each name=value pair on a new line.",
"    #workingDirectory:  # Optional  # The working directory for the Docker container.",
"    #entrypointOverride:  # Optional  # Override the default entry point for the Docker container.",
"    #containerCommand:  # Optional  # The docker run command first creates a writeable container layer over the specified image, and then starts it by using the specified run command. For example, if the image contains a simple Python Flask web application you can specify 'python app.py' to launch the web application.",
"    #runInBackground:  # Optional  # Run the Docker container in the background.",
"    restartPolicy: ${6:no} # Options: 'no', 'onFailure', 'always', 'unlessStopped' # Required  # Select a restart policy.",
"    #maxRestartRetries:  # Optional  # The maximum number of restart retries the Docker daemon attempts.",
"    #dockerHostEndpoint:  # Optional  # Select a Docker host service connection. Defaults to the agent's host.",
"    #enforceDockerNamingConvention:  # Optional  # If enabled Docker image name will be modified to follow Docker naming convention. Converts upper case character to lower case and removes spaces in image name.",
"    #memoryLimit:  # Optional  # The maximum amount of memory available to the container as a integer with optional suffixes like '2GB'.",
"$7"
],
"description": "Build, tag, push, or run Docker images, or run a Docker command"
}
}
