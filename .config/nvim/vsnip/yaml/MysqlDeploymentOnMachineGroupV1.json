{
"MySQL database deploy": {
"prefix": "adoMysqlDeploymentOnMachineGroup1",
"body": [
"- task: MysqlDeploymentOnMachineGroup@1",
"  inputs:",
"    #TaskNameSelector: # Options: 'SqlTaskFile', 'InlineSqlTask' # Optional  # Select one of the options between Script File & Inline Script.",
"    SqlFile: $1  # Required when TaskNameSelector = SqlTaskFile  # Full path of the script file on the automation agent or on a UNC path accessible to the automation agent like,  /\//\//\//\/BudgetIT/\/DeployBuilds/\/script.sql. Also, predefined system variables like, $(agent.releaseDirectory) can also be used here. A file containing SQL statements can be used here.​",
"    SqlInline: $2  # Required when TaskNameSelector = InlineSqlTask  # Enter the MySQL script to execute on the Database selected above.",
"    ServerName: ${3:localhost}  # Required  # Server name of 'Database for MySQL'.Example: localhost. When you connect using MySQL Workbench, this is the same value that is used for 'Hostname' in 'Parameters'",
"    #DatabaseName:  # Optional  # The name of database, if you already have one, on which the below script is needed to be run, else the script itself can be used to create the database.",
"    SqlUsername: $4  # Required  # When you connect using MySQL Workbench, this is the same value that is used for 'Username' in 'Parameters'.",
"    SqlPassword: $5  # Required  # Password for MySQL Database.<br>It can be variable defined in the pipeline. Example : $(password).<br>Also, you may mark the variable type as 'secret' to secure it.",
"    #SqlAdditionalArguments:  # Optional  # Additional options supported by MySQL simple SQL shell.  These options will be applied when executing the given file on the Database for MySQL.​<br>Example: You can change to default tab separated output format to HTML or even XML format. Or if you have problems due to insufficient memory for large result sets, use the --quick option.​",
"$6"
],
"description": "Run scripts and make changes to a MySQL Database"
}
}
