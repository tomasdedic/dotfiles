{
"Docker Compose": {
"prefix": "adoDockerCompose0",
"body": [
"- task: DockerCompose@0",
"  inputs:",
"    containerregistrytype: ${1:Azure Container Registry} # Options: 'Azure Container Registry', 'Container Registry' # Required  # Select a Container Registry Type.",
"    #dockerRegistryEndpoint:  # Optional  # Select a Docker registry service connection. Required for commands that need to authenticate with a registry.",
"    #azureSubscriptionEndpoint:  # Optional  # Select an Azure subscription",
"    #azureContainerRegistry:  # Optional  # Select an Azure Container Registry",
"    dockerComposeFile: ${2:**/docker-compose.yml}  # Required  # Path to the primary Docker Compose file to use.",
"    #additionalDockerComposeFiles:  # Optional  # Additional Docker Compose files to be combined with the primary Docker Compose file. Relative paths are resolved relative to the directory containing the primary Docker Compose file. If a specified file is not found, it is ignored. Specify each file path on a new line.",
"    #dockerComposeFileArgs:  # Optional  # Environment variables to be set during the command. Specify each name=value pair on a new line.",
"    #projectName:  # Optional  # Project name used for default naming of images and containers.",
"    #qualifyImageNames:  # Optional  # Qualify image names for built services with the Docker registry service connection's hostname if not otherwise specified.",
"    action: ${3:Run a Docker Compose command} # Options: 'Build services', 'Push services', 'Run services', 'Run a specific service', 'Lock services', 'Write service image digests', 'Combine configuration', 'Run a Docker Compose command' # Required  # Select a Docker Compose action.",
"    #additionalImageTags:  # Optional  # Additional tags for the Docker images being built or pushed.",
"    #includeSourceTags:  # Optional  # Include Git tags when building or pushing Docker images.",
"    #includeLatestTag:  # Optional  # Include the 'latest' tag when building or pushing Docker images.",
"    #buildImages:  # Optional  # Build images before starting service containers.",
"    serviceName: $4  # Required when action = Run a specific service  # Name of the specific service to run.",
"    #containerName:  # Optional  # Name of the specific service container to run.",
"    #ports:  # Optional  # Ports in the specific service container to publish to the host. Specify each host-port:container-port binding on a new line.",
"    #workDir:  # Optional  # The working directory for the specific service container.",
"    #entrypoint:  # Optional  # Override the default entry point for the specific service container.",
"    #containerCommand:  # Optional  # Command to run in the specific service container. For example, if the image contains a simple Python Flask web application you can specify 'python app.py' to launch the web application.",
"    #detached:  # Optional  # Run the service containers in the background.",
"    #abortOnContainerExit:  # Optional  # Stop all containers when any container exits.",
"    imageDigestComposeFile: ${5:$(Build.StagingDirectory)/docker-compose.images.yml}  # Required  # Path to a Docker Compose file that is created and populated with the full image repository digests of each service's Docker image.",
"    #removeBuildOptions:  # Optional  # Remove the build options from the output Docker Compose file.",
"    #baseResolveDirectory:  # Optional  # The base directory from which relative paths in the output Docker Compose file should be resolved.",
"    outputDockerComposeFile: ${6:$(Build.StagingDirectory)/docker-compose.yml}  # Required  # Path to an output Docker Compose file.",
"    dockerComposeCommand: $7  # Required when action = Run a Docker Compose command  # Docker Compose command to execute with arguments. For example, 'rm --all' to remove all stopped service containers.",
"    #arguments:  # Optional  # Docker Compose command options. Ex:<br> For build command,<br>--pull --compress --parallel",
"    #dockerHostEndpoint:  # Optional  # Select a Docker host service connection. Defaults to the agent's host.",
"    #nopIfNoDockerComposeFile:  # Optional  # If the Docker Compose file does not exist, skip this task. This is useful when the task offers optional behavior based on the existence of a Docker Compose file in the repository.",
"    #requireAdditionalDockerComposeFiles:  # Optional  # Produces an error if the additional Docker Compose files do not exist. This overrides the default behavior which is to ignore a file if it does not exist.",
"    #cwd:  # Optional  # Working directory for the Docker Compose command.",
"    #dockerComposePath:  # Optional  # This docker-compose executable will be used if the path is provided",
"$8"
],
"description": "Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry."
}
}
