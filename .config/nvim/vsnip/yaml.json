{
    "mustache": {
      "description": "Mustache filetype",
      "body": [
        "{{/* vim: set filetype=mustache: */}}"
      ],
      "prefix": [
        "mus"
      ]
    },
    "sa": {
        "description": "ServiceAccount",
        "body": [
            "apiVersion: v1",
            "kind: ServiceAccount",
            "metadata:",
            "\tname: ${1:name}"
        ],
        "prefix": [
            "sa"
        ]
    },
    "probe": {
        "description": "Liveness/Readiness Probes",
        "body": [
            "livenessProbe: &probe",
            "\tinitialDelaySeconds: ${1:10}",
            "\thttpGet:",
            "\t\tport: ${2:8080}",
            "\t\tpath: ${3:/}",
            "readinessProbe: *probe $0"
        ],
        "prefix": [
            "probe"
        ]
    },
    "cert": {
        "description": "cert-manager certificate",
        "body": [
            "apiVersion: certmanager.k8s.io/v1alpha1",
            "kind: Certificate",
            "metadata:",
            "\tname: ${1:name}",
            "\tnamespace: ${2:namespace}",
            "spec:",
            "\tsecretName: ${4:$3.tls}",
            "\tdnsNames:",
            "\t- ${3:some.domain.com}",
            "\tacme:",
            "\t\tconfig:",
            "\t\t- dns01:",
            "\t\t\t\tprovider: ${4:prod}",
            "\t\t\tdomains: [ $3 ]",
            "\tissuerRef:",
            "\t\tname: ${5:letsencrypt}",
            "\t\tkind: ClusterIssuer"
        ],
        "prefix": [
            "cert"
        ]
    },
    "pvol": {
        "description": "Pod Volume Object",
        "body": [
            "- name: ${1:name}",
            "\t${2:source}:",
            "\t\tname:"
        ],
        "prefix": [
            "pvol"
        ]
    },
    "init": {
        "description": "Init Container",
        "body": [
            "initContainers:",
            "- name: ${1:myinit}",
            "\timage: ${2:busybox}",
            "\tcommand: [${3:rm, -rf,  $5/lost+found}]",
            "\t${6:volumeMounts:",
            "\t- name: ${4:data}",
            "\t\tmountPath: ${5:/data}}$0"
        ],
        "prefix": [
            "init"
        ]
    },
    "kss": {
        "description": "test",
        "body": [
            "dsadasdas"
        ],
        "prefix": [
            "kss"
        ]
    },
    "job": {
        "description": "Kubernetes Job",
        "body": [
            "apiVersion: batch/v1",
            "kind: Job",
            "metadata:",
            "\tname: ${1:jobname}",
            "\tlabels:",
            "\t\t${2:sometag: somevalue}",
            "spec:",
            "\ttemplate:",
            "\t\tmetadata:",
            "\t\t\tname: $1",
            "\t\tspec:",
            "\t\t\tcontainers:",
            "\t\t\t- name: ${3:containerName}",
            "\t\t\t\timage: ${4: image}",
            "\t\t\t\timagePullPolicy: Always",
            "\t\t\t\tcommand:",
            "\t\t\t\t- ${5:\"override\"",
            "\t\t\t\t- \"--the\"",
            "\t\t\t\t- \"entrypoint\"}",
            "\t\t\trestartPolicy: OnFailure"
        ],
        "prefix": [
            "job"
        ]
    },
    "svc": {
        "description": "Service",
        "body": [
            "apiVersion: v1",
            "kind: Service",
            "metadata:",
            "\tname: ${1:frontend}",
            "\tnamespace: ${2:default}",
            "\tlabels:",
            "\t\tapp: ${3:someApp}",
            "\t\ttier: ${4:frontend}",
            "spec:",
            "\tports:",
            "\t- port: ${5:80}",
            "\tselector:",
            "\t\tapp: $3",
            "\t\ttier: $4"
        ],
        "prefix": [
            "svc"
        ]
    },
    "prom": {
        "description": "Prometheus annotations",
        "body": [
            "annotations:",
            "\tprometheus.io/scrape: \"true\"",
            "\tprometheus.io/endpoint: \"${1:/metrics}\"",
            "\tprometheus.io/port: \"${2:8080}\""
        ],
        "prefix": [
            "prom"
        ]
    },
    "strat": {
        "description": "Deployment Strategy",
        "body": [
            "strategy:",
            "\ttype: ${1:RollingUpdate|Recreate}",
            "\trollingUpdate:",
            "\t\tmaxSurge: ${2:1}",
            "\t\tmaxUnavailable: ${3:1}$0"
        ],
        "prefix": [
            "strat"
        ]
    },
    "edns": {
        "description": "external dns",
        "body": [
            "annotations:",
            "\texternal-dns.alpha.kubernetes.io/hostname: ${1:myname.mydomain.com}"
        ],
        "prefix": [
            "edns"
        ]
    },
    "dep": {
        "description": "Deployment",
        "body": [
            "apiVersion: apps/v1",
            "kind: Deployment",
            "metadata:",
            "\tname: ${1:some-controller}",
            "\tnamespace: ${2:default}",
            "spec:",
            "\treplicas: 1",
            "\tselector:",
            "\t\tmatchLabels:",
            "\t\t\t$3",
            "\ttemplate:",
            "\t\tmetadata:",
            "\t\t\tlabels:",
            "\t\t\t\t${3:app: $1}",
            "\t\tspec:",
            "\t\t\tcontainers:",
            "\t\t\t- name: ${4:name}",
            "\t\t\t\timage: ${5:nginx}",
            "\t\t\t\timagePullPolicy: Always",
            "\t\t\t\tresources:",
            "\t\t\t\t\trequests:",
            "\t\t\t\t\t\tcpu: 100m",
            "\t\t\t\t\t\tmemory: 200Mi",
            "\t\t\t\tports:",
            "\t\t\t\t- containerPort: 8080"
        ],
        "prefix": [
            "dep"
        ]
    },
    "cfg": {
        "description": "ConfigMap",
        "body": [
            "apiVersion: v1",
            "kind: ConfigMap",
            "metadata:",
            "\tname: ${1:name}",
            "data:",
            "\t${2:key}: ${3:value}"
        ],
        "prefix": [
            "cfg"
        ]
    },
    "cron": {
        "description": "Kubernetes Cronjob",
        "body": [
            "apiVersion: batch/v2alpha1",
            "kind: CronJob",
            "metadata:",
            "\tname: ${1:name}",
            "spec:",
            "\tschedule: \"${2:*/1} * * * *\"",
            "\tjobTemplate:",
            "\t\tspec:",
            "\t\t\ttemplate:",
            "\t\t\t\tspec:",
            "\t\t\t\t\tcontainers:",
            "\t\t\t\t\t- name: $1",
            "\t\t\t\t\t\timage: ${3: image}",
            "\t\t\t\t\t\targs: ${4:",
            "\t\t\t\t\t\t- /bin/sh",
            "\t\t\t\t\t\t- -c",
            "\t\t\t\t\t\t- date; echo Hello from the Kubernetes cluster}",
            "\t\t\t\t\trestartPolicy: OnFailure"
        ],
        "prefix": [
            "cron"
        ]
    },
    "ing": {
        "description": "Ingress",
        "body": [
            "apiVersion: extensions/v1beta1",
            "kind: Ingress",
            "metadata:",
            "\tname: ${1:name}",
            "\tnamespace: ${2:default}",
            "annotations:",
            "\tcert-manager.io/cluster-issuer: letsencrypt-prod",
            "\tkubernetes.io/ingress.class: nginx-external",
            "\tkubernetes.io/tls-acme: \"true\"",
            "\tnginx.ingress.kubernetes.io/ssl-passthrough: \"false\"",
            "spec:",
            "\t${5:tls:",
            "\t- secretName: ${4:$3.tls}",
            "\t\thosts:",
            "\t\t- $3",
            "\t}rules:",
            "\t- host: ${3:host.tld}",
            "\t\thttp:",
            "\t\t\tpaths:",
            "\t\t\t- path: ${7:/}",
            "\t\t\t\tbackend:",
            "\t\t\t\t\tserviceName: ${8:service}",
            "\t\t\t\t\tservicePort: ${9:portNumberOrName}"
        ],
        "prefix": [
            "ing"
        ]
    },
    "env": {
        "description": "Environment template",
        "body": [
            "- name: ${1:VAR_NAME}",
            "  value: ${2:value}"
        ],
        "prefix": [
            "env"
        ]
    },
    "ns": {
        "description": "Namespace",
        "body": [
            "apiVersion: v1",
            "kind: Namespace",
            "metadata:",
            "\tname: ${1:name}"
        ],
        "prefix": [
            "ns"
        ]
    },
    "secref": {
        "description": "env SecretRef",
        "body": [
            "valueFrom:",
            "\tsecretKeyRef:",
            "\t\tname: ${1:secret-name}",
            "\t\tkey: ${2:key-name}"
        ],
        "prefix": [
            "secref"
        ]
    },
    "rc": {
        "description": "Replication Controller",
        "body": [
            "# WARNING, use Deployments -- ReplicationController is being replaced.",
            "apiVersion: v1",
            "kind: ReplicationController",
            "metadata:",
            "\tname: ${1:some-controller}",
            "\tnamespace: ${2:default}",
            "spec:",
            "\treplicas: 1",
            "\ttemplate:",
            "\t\tmetadata:",
            "\t\t\tlabels:",
            "\t\t\t\tapp: $1",
            "\t\t\t\ttier: $3",
            "\t\tspec:",
            "\t\t\tcontainers:",
            "\t\t\t- name: ${4:name}",
            "\t\t\t\timage: ${5:nginx}",
            "\t\t\t\timagePullPolicy: Always",
            "\t\t\t\tresources:",
            "\t\t\t\t\trequests:",
            "\t\t\t\t\t\tcpu: 100m",
            "\t\t\t\t\t\tmemory: 200Mi",
            "\t\t\t\tports:",
            "\t\t\t\t- containerPort: 8080"
        ],
        "prefix": [
            "rc"
        ]
    },
    "atls": {
        "description": "tls-acme annotations",
        "body": [
            "annotations:",
            "\tkubernetes.io/tls-acme: \"true\""
        ],
        "prefix": [
            "atls"
        ]
    },
    "pvc": {
        "description": "PersistentVolumeClaim",
        "body": [
            "apiVersion: v1",
            "kind: PersistentVolumeClaim",
            "metadata:",
            "\tname: ${1:name}",
            "\tlabels:",
            "\t\t# insert any desired labels to identify your claim",
            "\t\tapp: ${2:app}",
            "\t\ttier: ${3:tier}",
            "spec:",
            "\t${4:storageClassName: ${5:standard}}",
            "\taccessModes:",
            "\t\t- ${6:ReadWriteOnce}",
            "\tresources:",
            "\t\trequests:",
            "\t\t\t# The amount of the volume's storage to request",
            "\t\t\tstorage: ${7:20Gi}"
        ],
        "prefix": [
            "pvc"
        ]
    },
    "rbac": {
        "description": "Role and Binding",
        "body": [
            "kind: ${1:Cluster}Role",
            "apiVersion: rbac.authorization.k8s.io/v1",
            "metadata:",
            "\t${2:namespace: ${3:default}",
            "\t}name: ${4:configmap-updater}",
            "rules:",
            "- apiGroups: [\"${5:}\"]",
            "\tresources: [\"${6:configmaps}\"]",
            "\tresourceNames: [\"${7:my-configmap}\"]",
            "\tverbs: [${8:\"update\", \"get\"}]",
            "---",
            "# This role binding allows \"jane\" to read pods in the \"default\" namespace.",
            "kind: ${9:Cluster}RoleBinding",
            "apiVersion: rbac.authorization.k8s.io/v1",
            "metadata:",
            "\tname: $4",
            "\t$2",
            "subjects:",
            "- kind: ${10:User|ServiceAccount|Group}",
            "\tname: ${11:jane} # Name is case sensitive",
            "\tapiGroup: rbac.authorization.k8s.io",
            "roleRef:",
            "\tkind: $1Role #this must be Role or ClusterRole",
            "\tname: $4 # this must match the name of the Role or ClusterRole you wish to bind to",
            "\tapiGroup: rbac.authorization.k8s.io"
        ],
        "prefix": [
            "rbac"
        ]
    },
    "depsvc": {
        "description": "Deployment and service",
        "body": [
            "apiVersion: apps/v1",
            "kind: Deployment",
            "metadata:",
            "\tname: ${1:some-controller}",
            "\tnamespace: ${2:default}",
            "spec:",
            "\treplicas: 1",
            "\tselector:",
            "\t\tmatchLabels:",
            "\t\t\t$3",
            "\ttemplate:",
            "\t\tmetadata:",
            "\t\t\tlabels:",
            "\t\t\t\t${3:app: $1}",
            "\t\tspec:",
            "\t\t\tcontainers:",
            "\t\t\t- name: ${4:name}",
            "\t\t\t\timage: ${5:nginx}",
            "\t\t\t\timagePullPolicy: Always",
            "\t\t\t\tresources:",
            "\t\t\t\t\trequests:",
            "\t\t\t\t\t\tcpu: 100m",
            "\t\t\t\t\t\tmemory: 200Mi",
            "\t\t\t\tports:",
            "\t\t\t\t- containerPort: ${6:8080}",
            "---",
            "apiVersion: v1",
            "kind: Service",
            "metadata:",
            "\tname: $1",
            "\tnamespace: $2",
            "spec:",
            "\tports:",
            "\t- port: ${7:80}",
            "\t\ttargetPort: $6",
            "\tselector:",
            "\t\t$3"
        ],
        "prefix": [
            "depsvc"
        ]
    },
    "pv": {
        "description": "PersistentVolume",
        "body": [
            "apiVersion: v1",
            "kind: PersistentVolume",
            "metadata:",
            "\tname: ${1:name}",
            "\tlabels:",
            "\t\tapp: ${2:app}",
            "\t\ttier: ${3:tier}",
            "spec:",
            "\tcapacity:",
            "\t\tstorage: ${4:20Gi}",
            "\taccessModes:",
            "\t\t- ${5:ReadWriteMany}",
            "\tnfs:",
            "\t\tserver: ${6:NameOrIP}",
            "\t\tpath: ${7:\"/share/path/on/server\"}"
        ],
        "prefix": [
            "pv"
        ]
    },
    "skr": {
        "description": "SecretKeyRef",
        "body": [
            "valueFrom:",
            "\tsecretKeyRef:",
            "\t\tname: ${1:secret}",
            "\t\tkey: ${2:key}"
        ],
        "prefix": [
            "skr"
        ]
    },
    "rb": {
        "description": "RoleBinding",
        "body": [
            "# This role binding allows \"jane\" to read pods in the \"default\" namespace.",
            "kind: ${1:Cluster}RoleBinding",
            "apiVersion: rbac.authorization.k8s.io/v1",
            "metadata:",
            "\tname: ${2:read-pods}",
            "\t${3:namespace: ${4:pods}",
            "}subjects:",
            "- kind: ${5:User|ServiceAccount|Group}",
            "\tname: ${6:jane} # Name is case sensitive",
            "\tapiGroup: rbac.authorization.k8s.io",
            "roleRef:",
            "\tkind: ${7:Cluster}Role #this must be Role or ClusterRole",
            "\tname: ${8:pod-reader} # this must match the name of the Role or ClusterRole you wish to bind to",
            "\tapiGroup: rbac.authorization.k8s.io"
        ],
        "prefix": [
            "rb"
        ]
    },
    "ks": {
        "description": "Kustomization-secretgenerator",
        "body": [
            "apiVersion: kustomize.config.k8s.io/v1beta1",
            "kind: Kustomization",
            "",
            "generatorOptions:",
            "\tdisableNameSuffixHash: true",
            "secretGenerator:",
            "- name: db-user-pass",
            "\tliterals:",
            "\t- username=admin",
            "\t- password=1f2d1e2e67df",
            "- name: gcr-pull",
            "\ttype: kubernetes.io/dockerconfigjson",
            "\tfiles:",
            "\t\t- .dockerconfigjson=config.json"
        ],
        "prefix": [
            "ks"
        ]
    },
    "netp": {
        "description": "NetworkPolicy",
        "body": [
            "kind: NetworkPolicy",
            "apiVersion: extensions/v1beta1",
            "metadata:",
            "\tnamespace: ${1:default}",
            "\tname: ${2:policyname}",
            "\tspec:",
            "\t${4:podSelector:",
            "\t\t\tmatchLabels:",
            "\t\t\t\t${3:{}}",
            "}\tingress:",
            "\t\t\t- {}"
        ],
        "prefix": [
            "netp"
        ]
    },
    "ku": {
        "description": "Kustomization",
        "body": [
            "apiVersion: kustomize.config.k8s.io/v1beta1",
            "kind: Kustomization",
            "",
            "resources:",
            "- ${1:some-resource-yaml}"
        ],
        "prefix": [
            "ku"
        ]
    },
    "ss": {
        "description": "StatefulSet",
        "body": [
            "apiVersion: v1",
            "kind: Service",
            "metadata:",
            "\tname: ${1:myservice}",
            "spec:",
            "\tports:",
            "\t- port: $5",
            "\t\tname: $6",
            "\tclusterIP: None",
            "\tselector:",
            "\t\t$2",
            "---",
            "apiVersion: apps/v1",
            "kind: StatefulSet",
            "metadata:",
            "\tname: ${1:mystatefulset}",
            "spec:",
            "\tselector:",
            "\t\tmatchLabels:",
            "\t\t\t$2",
            "\tserviceName: \"nginx\"",
            "\treplicas: 3 # by default is 1",
            "\ttemplate:",
            "\t\tmetadata:",
            "\t\t\tlabels:",
            "\t\t\t\t${2:app: $1}",
            "\t\tspec:",
            "\t\t\t# terminationGracePeriodSeconds: 10",
            "\t\t\tcontainers:",
            "\t\t\t- name: ${3:$1}",
            "\t\t\t\timage: ${4:$1}",
            "\t\t\t\tports:",
            "\t\t\t\t- containerPort: ${5:80}",
            "\t\t\t\t\tname: ${6:web}",
            "\t\t\t\tvolumeMounts:",
            "\t\t\t\t- name: ${7:volume}",
            "\t\t\t\t\tmountPath: ${8:/var/lib/mydata}",
            "\tvolumeClaimTemplates:",
            "\t- metadata:",
            "\t\t\tname: $7",
            "\t\tspec:",
            "\t\t\taccessModes: [ \"ReadWriteOnce\" ]",
            "\t\t\tstorageClassName: \"${9:standard}\"",
            "\t\t\tresources:",
            "\t\t\t\trequests:",
            "\t\t\t\t\tstorage: ${10:1G}"
        ],
        "prefix": [
            "ss"
        ]
    },
    "res": {
        "description": "Resources",
        "body": [
            "resources:",
            "\trequests:",
            "\t\tcpu: ${1:100m}",
            "\t\tmemory: ${2:200Mi}",
            "\t${5:limits:",
            "\t\tcpu: ${3:$1}",
            "\t\tmemory: ${4:$2}}$0"
        ],
        "prefix": [
            "res"
        ]
    },
    "cmtls": {
        "description": "cert-manager tls annotations",
        "body": [
            "${2:annotations:",
            "\t}certmanager.k8s.io/cluster-issuer: ${1:lets-encrypt}"
        ],
        "prefix": [
            "cmtls"
        ]
    },
    "vtls": {
        "description": "tls-vault annotations",
        "body": [
            "annotations:",
            "\tkubernetes.io/tls-vault: \"true\""
        ],
        "prefix": [
            "vtls"
        ]
    },
    "role": {
        "description": "Role",
        "body": [
            "kind: ${1:Cluster}Role",
            "apiVersion: rbac.authorization.k8s.io/v1",
            "metadata:",
            "\t${2:namespace: ${3:default}",
            "\t}name: ${4:configmap-updater}",
            "rules:",
            "- apiGroups: [\"${5:}\"]",
            "\tresources: [\"${6:configmaps}\"]",
            "\tresourceNames: [\"${7:my-configmap}\"]",
            "\tverbs: [${8:\"update\", \"get\"}]"
        ],
        "prefix": [
            "role"
        ]
    },
    "pvolm": {
        "description": "Volume Mount and spec",
        "body": [
            "\tvolumeMounts:",
            "\t- name: ${1:volume}",
            "\t\tmountPath: ${2:/etc/mount/path}",
            "\t\t${3:subPath: ${4: key}}",
            "volumes:",
            "- name: $1",
            "\t${5:configMap}:",
            "\t\t${6:name}: ${7:someName}"
        ],
        "prefix": [
            "pvolm"
        ]
    },
    "sec": {
        "description": "Secret",
        "body": [
            "apiVersion: v1",
            "kind: Secret",
            "metadata:",
            "  name: ${1:secret-name}",
            "type: ${2:Opaque}",
            "data:",
            "  ${3:key}: ${4:value}"
        ],
        "prefix": [
            "sec"
        ]
    },
    "hpa": {
        "description": "Horizontal Pod Autoscaler",
        "body": [
            "apiVersion: autoscaling/v2beta1",
            "kind: HorizontalPodAutoscaler",
            "metadata:",
            "  name: ${1:hpa-name}",
            "  namespace: ${2:default}",
            "spec:",
            "  scaleTargetRef:",
            "    apiVersion: apps/v1",
            "    kind: Deployment",
            "    name: ${3:deployment-name}",
            "  minReplicas: 1",
            "  maxReplicas: 10",
            "  metrics:",
            "  - type: Resource",
            "    resource:",
            "      name: cpu",
            "      targetAverageUtilization: 10",
            "  - type: Resource",
            "    resource:",
            "    name: memory",
            "      targetAverageValue: 1000Mi"
        ],
        "prefix": [
            "hpa"
        ]
    },
    "aff": {
        "description": "Affinitiy/Anti-Affinity",
        "body": [
            "pod${1:Anti}Affinity:",
            "\t${2:preferred|required}DuringSchedulingIgnoredDuringExecution:",
            "\t- weight: 100",
            "\t\tpodAffinityTerm:",
            "\t\t\tlabelSelector:",
            "\t\t\t\tmatchExpressions:",
            "\t\t\t\t- key: ${3:app}",
            "\t\t\t\t\toperator: In",
            "\t\t\t\t\tvalues:",
            "\t\t\t\t\t- ${4:appname}",
            "\t\t\ttopologyKey: ${5:kubernetes.io/hostname}"
        ],
        "prefix": [
            "aff"
        ]
    },
    "ingtls": {
        "description": "Ingress TLS section",
        "body": [
            "tls:",
            "- secretName: ${2:$1.tls}",
            "\thosts:",
            "\t- ${1:host}"
        ],
        "prefix": [
            "ingtls"
        ]
    },
    "volm": {
        "description": "Volume Mount",
        "body": [
            "- name: ${1:volume}",
            "\tmountPath: ${2:/etc/mount/path}",
            "\t${3:subPath: ${4: key}}",
            "$0"
        ],
        "prefix": [
            "volm"
        ]
    },
    "depsvcing": {
        "description": "Deployment, service, and ingress",
        "body": [
            "apiVersion: apps/v1",
            "kind: Deployment",
            "metadata:",
            "\tname: ${1:some-controller}",
            "\tnamespace: ${2:default}",
            "spec:",
            "\treplicas: 1",
            "\tselector:",
            "\t\tmatchLabels:",
            "\t\t\t$3",
            "\ttemplate:",
            "\t\tmetadata:",
            "\t\t\tlabels:",
            "\t\t\t\t${3:app: $1}",
            "\t\tspec:",
            "\t\t\tcontainers:",
            "\t\t\t- name: ${4:name}",
            "\t\t\t\timage: ${5:nginx}",
            "\t\t\t\timagePullPolicy: Always",
            "\t\t\t\tresources:",
            "\t\t\t\t\trequests:",
            "\t\t\t\t\t\tcpu: 100m",
            "\t\t\t\t\t\tmemory: 200Mi",
            "\t\t\t\tports:",
            "\t\t\t\t- containerPort: ${6:8080}",
            "---",
            "apiVersion: v1",
            "kind: Service",
            "metadata:",
            "\tname: $1",
            "\tnamespace: $2",
            "spec:",
            "\tports:",
            "\t- port: ${7:80}",
            "\t\ttargetPort: $6",
            "\tselector:",
            "\t\t$3",
            "---",
            "apiVersion: extensions/v1beta1",
            "kind: Ingress",
            "metadata:",
            "\tname: $1",
            "\tnamespace: $2",
            "annotations:",
            "\tcert-manager.io/cluster-issuer: letsencrypt-prod",
            "\tkubernetes.io/ingress.class: nginx-external",
            "\tkubernetes.io/tls-acme: \"true\"",
            "\tnginx.ingress.kubernetes.io/ssl-passthrough: \"false\"",
            "spec:",
            "\t${10:tls:",
            "\t- secretName: ${9:$8.tls}",
            "\t\thosts:",
            "\t\t- $8",
            "\t}rules:",
            "\t- host: ${8:host}",
            "\t\thttp:",
            "\t\t\tpaths:",
            "\t\t\t- path: ${11:/}",
            "\t\t\t\tbackend:",
            "\t\t\t\t\tserviceName: $1",
            "\t\t\t\t\tservicePort: $7"
        ],
        "prefix": [
            "depsvcing"
        ]
    }
}
