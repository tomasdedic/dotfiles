{
"PowerShell": {
"prefix": "adoPowerShell2",
"body": [
"- task: PowerShell@2",
"  inputs:",
"    #targetType: # Options: 'filePath', 'inline' # Optional  # Target script type: File Path or Inline",
"    filePath: $1  # Required when targetType = filePath  # Path of the script to execute. Must be a fully qualified path or relative to $(System.DefaultWorkingDirectory).",
"    #arguments:  # Optional  # Arguments passed to the PowerShell script. Either ordinal parameters or named parameters.",
"    script: ${2:# Write your PowerShell commands here.Write-Host \"Hello World\"}  # Required ",
"    #errorActionPreference: # Options: 'default', 'stop', 'continue', 'silentlyContinue' # Optional  # When not `Default`, prepends the line `$ErrorActionPreference = 'VALUE'` at the top of your script.",
"    #warningPreference: # Options: 'default', 'stop', 'continue', 'silentlyContinue' # Optional  # When not `Default`, prepends the line `$WarningPreference = 'VALUE'` at the top of your script.",
"    #informationPreference: # Options: 'default', 'stop', 'continue', 'silentlyContinue' # Optional  # When not `Default`, prepends the line `$InformationPreference = 'VALUE'` at the top of your script.",
"    #verbosePreference: # Options: 'default', 'stop', 'continue', 'silentlyContinue' # Optional  # When not `Default`, prepends the line `$VerbosePreference = 'VALUE'` at the top of your script.",
"    #debugPreference: # Options: 'default', 'stop', 'continue', 'silentlyContinue' # Optional  # When not `Default`, prepends the line `$DebugPreference = 'VALUE'` at the top of your script.",
"    #failOnStderr:  # Optional  # If this is true, this task will fail if any errors are written to the error pipeline, or if any data is written to the Standard Error stream. Otherwise the task will rely on the exit code to determine failure.",
"    #showWarnings:  # Optional  # If this is true, and your script writes a warnings - they are shown as warnings also in pipeline logs",
"    #ignoreLASTEXITCODE:  # Optional  # If this is false, the line `if ((Test-Path -LiteralPath variable:/\/LASTEXITCODE)) { exit $LASTEXITCODE }` is appended to the end of your script. This will cause the last exit code from an external command to be propagated as the exit code of powershell. Otherwise the line is not appended to the end of your script.",
"    #pwsh:  # Optional  # If this is true, then on Windows the task will use pwsh.exe from your PATH instead of powershell.exe.",
"    #workingDirectory:  # Optional  # Working directory where the script is run.",
"    #runScriptInSeparateScope:  # Optional  # This input allows executing PowerShell scripts using '&' operator instead of the default '.'. If this input set to the true script will be executed in separate scope and globally scoped PowerShell variables won't be updated",
"$3"
],
"description": "Run a PowerShell script on Linux, macOS, or Windows"
}
}
