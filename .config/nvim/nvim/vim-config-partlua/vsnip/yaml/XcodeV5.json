{
"Xcode": {
"prefix": "adoXcode5",
"body": [
"- task: Xcode@5",
"  inputs:",
"    actions: ${1:build}  # Required  # Enter a space-delimited list of actions. Some valid options are `build`, `clean`, `test`, `analyze`, and `archive`. For example,`clean build` will run a clean build.",
"    #configuration:  # Optional  # Enter the Xcode project or workspace configuration to be built. The default value of this field is the variable `$(Configuration)`. When using a variable, make sure to specify a value (for example, `Release`) on the **Variables** tab.",
"    #sdk:  # Optional  # Specify an SDK to use when building the Xcode project or workspace. From the macOS Terminal application, run `xcodebuild -showsdks` to display the valid list of SDKs. The default value of this field is the variable `$(SDK)`. When using a variable, make sure to specify a value (for example, `iphonesimulator`) on the **Variables** tab.",
"    #xcWorkspacePath:  # Optional  # (Optional) Enter a relative path from the root of the repository to the Xcode workspace or project. For example, `MyApp/MyApp.xcworkspace` or `MyApp/MyApp.xcodeproj`. Wildcards can be used ([more information](https://go.microsoft.com/fwlink/?linkid=856077)).",
"    #scheme:  # Optional  # (Optional) Enter a scheme name defined in Xcode. It must be a shared scheme, with its <strong>Shared</strong> checkbox enabled under <strong>Managed Schemes</strong> in Xcode. If you specify a <strong>Workspace or project path</strong> above without specifying a scheme, and the workspace has a single shared scheme, it will be automatically used.",
"    #xcodeVersion: # Options: '8', '9', '10', '11', '12', 'default', 'specifyPath' # Optional  # Specify the target version of Xcode. Select `Default` to use the default version of Xcode on the agent machine. Selecting a version number (e.g. `Xcode 9`) relies on environment variables being set on the agent machine for the version's location (e.g. `XCODE_9_DEVELOPER_DIR=/Applications/Xcode_9.0.0.app/Contents/Developer`). Select `Specify path` to provide a specific path to the Xcode developer directory.<br/>Note: XCode 12 is installed on macOS-10.15 (or higher)",
"    #xcodeDeveloperDir:  # Optional  # (Optional) Enter a path to a specific Xcode developer directory (e.g. `/Applications/Xcode_9.0.0.app/Contents/Developer`). This is useful when multiple versions of Xcode are installed on the agent machine.",
"    packageApp: $2  # Required  # Indicate whether an IPA app package file should be generated as a part of the build.",
"    #archivePath:  # Optional  # (Optional) Specify a directory where created archives should be placed.",
"    #exportPath:  # Optional  # (Optional) Specify the destination for the product exported from the archive.",
"    #exportOptions: # Options: 'auto', 'plist', 'specify' # Optional  # Select a way of providing options for exporting the archive. When the default value of `Automatic` is selected, the export method is automatically detected from the archive. Select `Plist` to specify a plist file containing export options. Select `Specify` to provide a specific **Export method** and **Team ID**.",
"    exportMethod: ${3:development}  # Required  # Enter the method that Xcode should use to export the archive. For example: `app-store`, `package`, `ad-hoc`, `enterprise`, or `development`.",
"    #exportTeamId:  # Optional  # (Optional) Enter the 10-character team ID from the Apple Developer Portal to use during export.",
"    exportOptionsPlist: $4  # Required when exportOptions == plist  # Enter the path to the plist file that contains options to use during export.",
"    #exportArgs:  # Optional  # (Optional) Enter additional command line arguments to be used during export.",
"    #signingOption: # Options: 'nosign', 'default', 'manual', 'auto' # Optional  # Choose the method of signing the build. Select `Do not code sign` to disable signing. Select `Project defaults` to use only the project's signing configuration. Select `Manual signing` to force manual signing and optionally specify a signing identity and provisioning profile. Select `Automatic signing` to force automatic signing and optionally specify a development team ID. If your project requires signing, use the \"Install Apple...\" tasks to install certificates and provisioning profiles prior to the Xcode build.",
"    #signingIdentity:  # Optional  # (Optional) Enter a signing identity override with which to sign the build. This may require unlocking the default keychain on the agent machine. If no value is entered, the Xcode project's setting will be used.",
"    #provisioningProfileUuid:  # Optional  # (Optional) Enter the UUID of an installed provisioning profile to be used for this build. Use separate build tasks with different schemes or targets to specify separate provisioning profiles by target in a single workspace (iOS, tvOS, watchOS).",
"    #provisioningProfileName:  # Optional  # (Optional) Enter the name of an installed provisioning profile to be used for this build. If specified, this takes precedence over the provisioning profile UUID. Use separate build tasks with different schemes or targets to specify separate provisioning profiles by target in a single workspace (iOS, tvOS, watchOS).",
"    #teamId:  # Optional  # (Optional, unless you are a member of multiple development teams.) Specify the 10-character development team ID.",
"    #destinationPlatformOption: # Options: 'default', 'iOS', 'tvOS', 'macOS', 'custom' # Optional  # Select the destination device's platform to be used for UI testing when the generic build device isn't valid. Choose `Custom` to specify a platform not included in this list. When `Default` is selected, no simulators nor devices will be targeted.",
"    #destinationPlatform:  # Optional  # Enter a destination device's platform to be used for UI testing when the generic build device isn't valid.",
"    #destinationTypeOption: # Options: 'simulators', 'devices' # Optional  # Choose the destination type to be used for UI testing. Devices must be connected to the Mac performing the build via a cable or network connection. See <strong>Devices and Simulators</strong> in Xcode.",
"    #destinationSimulators:  # Optional  # Enter an Xcode simulator name to be used for UI testing. For example, enter `iPhone X` (iOS and watchOS) or `Apple TV 4K` (tvOS). A target OS version is optional and can be specified in the format 'OS=<i>versionNumber</i>', such as `iPhone X,OS=11.1`. A list of simulators installed on the <strong>Hosted macOS</strong> agent can be [found here](https://go.microsoft.com/fwlink/?linkid=875290).",
"    #destinationDevices:  # Optional  # Enter the name of the device to be used for UI testing, such as `Raisa's iPad`.",
"    #args:  # Optional  # (Optional) Enter additional command line arguments with which to build. This is useful for specifying `-target` or `-project` arguments instead of specifying a workspace/project and scheme.",
"    #cwd:  # Optional  # (Optional) Enter the working directory in which to run the build. If no value is entered, the root of the repository will be used.",
"    #useXcpretty:  # Optional  # Specify whether to use xcpretty to format xcodebuild output. Enabling this requires xcpretty to be installed on the agent machine. If xcpretty is not installed, raw xcodebuild output is shown. xcpretty is preinstalled on Azure Pipelines hosted build agents. See [xcpretty](https://github.com/supermarin/xcpretty) on GitHub.",
"    #xcprettyArgs:  # Optional  # Additional arguments to pass to xcpretty.",
"    #publishJUnitResults:  # Optional  # Specify whether to publish JUnit test results to Azure Pipelines. This requires xcpretty to be enabled to generate JUnit test results.",
"    #testRunTitle:  # Optional  # Title of the test run when publishing JUnit test results to Azure Pipelines.",
"$5"
],
"description": "Build, test, or archive an Xcode workspace on macOS. Optionally package an app."
}
}
