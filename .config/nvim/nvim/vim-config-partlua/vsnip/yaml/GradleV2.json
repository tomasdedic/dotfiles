{
"Gradle": {
"prefix": "adoGradle2",
"body": [
"- task: Gradle@2",
"  inputs:",
"    wrapperScript: ${1:gradlew}  # Required  # Relative path from the repository root to the Gradle Wrapper script.",
"    #cwd:  # Optional  # Working directory in which to run the Gradle build. If not specified, the repository root directory is used.",
"    #options:  # Optional ",
"    tasks: ${2:build}  # Required ",
"    publishJUnitResults: ${3:true}  # Required  # Select this option to publish JUnit test results produced by the Gradle build to Azure Pipelines. Each test results file matching `Test Results Files` will be published as a test run in Azure Pipelines.",
"    testResultsFiles: ${4:**/TEST-*.xml}  # Required  # Test results files path. Wildcards can be used ([more information](https://go.microsoft.com/fwlink/?linkid=856077)). For example, `**/TEST-*.xml` for all XML files whose name starts with TEST-.",
"    #testRunTitle:  # Optional  # Provide a name for the test run.",
"    #codeCoverageTool: # Options: 'None', 'Cobertura', 'JaCoCo' # Optional  # Select the code coverage tool.",
"    classFilesDirectories: ${5:build/classes/main/}  # Required  # Comma-separated list of directories containing class files and archive files (JAR, WAR, etc.). Code coverage is reported for class files in these directories. Normally, classes under `build/classes/java/main` (for Gradle 4+) are searched, which is the default class directory for Gradle builds",
"    #classFilter:  # Optional  # Comma-separated list of filters to include or exclude classes from collecting code coverage. For example: +:com.*,+:org.*,-:my.app*.*.",
"    #failIfCoverageEmpty:  # Optional  # Fail the build if code coverage did not produce any results to publish.",
"    #gradle5xOrHigher:  # Optional  # Set this to 'true' if gradle version is >= 5.x.'True' by default.",
"    javaHomeSelection: ${6:JDKVersion} # Options: 'JDKVersion', 'Path' # Required  # Sets JAVA_HOME either by selecting a JDK version that will be discovered during builds or by manually entering a JDK path.",
"    #jdkVersion: # Options: 'default', '1.11', '1.10', '1.9', '1.8', '1.7', '1.6' # Optional  # Will attempt to discover the path to the selected JDK version and set JAVA_HOME accordingly.",
"    jdkUserInputPath: $7  # Required when javaHomeSelection = Path  # Sets JAVA_HOME to the given path.",
"    #jdkArchitecture: # Options: 'x86', 'x64' # Optional  # Optionally supply the architecture (x86, x64) of the JDK.",
"    #gradleOpts:  # Optional  # Sets the GRADLE_OPTS environment variable, which is used to send command-line arguments to start the JVM. The xmx flag specifies the maximum memory available to the JVM.",
"    sqAnalysisEnabled: ${8:false}  # Required  # This option has changed from version 1 of the **Gradle** task to use the [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube) and [SonarCloud](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarcloud) marketplace extensions. Enable this option to run [SonarQube or SonarCloud analysis](http://redirect.sonarsource.com/doc/install-configure-scanner-tfs-ts.html) after executing tasks in the **Tasks** field. You must also add a **Prepare Analysis Configuration** task from one of the extensions to the build pipeline before this Gradle task.",
"    sqGradlePluginVersionChoice: ${9:specify} # Options: 'specify', 'build' # Required  # The SonarQube Gradle plugin version to use. You can declare it in your Gradle configuration file, or specify a version here.",
"    sqGradlePluginVersion: ${10:2.6.1}  # Required  # Refer to https://plugins.gradle.org/plugin/org.sonarqube for all available versions.",
"    #checkstyleAnalysisEnabled:  # Optional  # Run the Checkstyle tool with the default Sun checks. Results are uploaded as build artifacts.",
"    #findbugsAnalysisEnabled:  # Optional  # Use the FindBugs static analysis tool to look for bugs in the code. Results are uploaded as build artifacts. In Gradle 6.0 this plugin was removed. Use spotbugs plugin instead. [More info](https://docs.gradle.org/current/userguide/upgrading_version_5.html#the_findbugs_plugin_has_been_removed)",
"    #pmdAnalysisEnabled:  # Optional  # Use the PMD Java static analysis tool to look for bugs in the code. Results are uploaded as build artifacts.",
"    spotBugsAnalysisEnabled: ${11:false}  # Required  # Enable this option to run spotBugs. This plugin works with Gradle v5.6 or later. [More info](https://spotbugs.readthedocs.io/en/stable/gradle.html#use-spotbugs-gradle-plugin)",
"    spotBugsGradlePluginVersionChoice: ${12:specify} # Options: 'specify', 'build' # Required  # The Spotbugs Gradle plugin version to use. You can declare it in your Gradle configuration file, or specify a version here.",
"    spotbugsGradlePluginVersion: ${13:4.7.0}  # Required  # Refer to https://plugins.gradle.org/plugin/com.github.spotbugs for all available versions.",
"$14"
],
"description": "Build using a Gradle wrapper script"
}
}
