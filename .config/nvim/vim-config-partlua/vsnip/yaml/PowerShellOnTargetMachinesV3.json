{
"PowerShell on target machines": {
"prefix": "adoPowerShellOnTargetMachines3",
"body": [
"- task: PowerShellOnTargetMachines@3",
"  inputs:",
"    Machines: $1  # Required  # Provide a comma separated list of machine IP addresses or FQDNs along with ports. Port is defaulted based on the selected protocol. <br>Eg: dbserver.fabrikam.com,dbserver_int.fabrikam.com:5986,192.168.12.34:5986 <br>Or provide build or release variables. Eg: $(variableName) <br>If you are using HTTPS, name/IP of machine should match the CN in the certificate.",
"    #UserName:  # Optional  # Username for the target machines. The user should be a part of Administrators group or WinRM remote management users group. <br> Eg: Format: Domain/\/Admin User, Admin User@Domain, ./\/Admin User",
"    #UserPassword:  # Optional  # password for the target machines. <br>It can accept variable defined in build or release pipelines as '$(passwordVariable)'. <br>You may mark variable type as 'secret' to secure it.",
"    #ScriptType: # Options: 'FilePath', 'Inline' # Optional  # The type of script to execute: Inline or File Path",
"    ScriptPath: $2  # Required when ScriptType = FilePath  # Location of the PowerShell script on the target machines or on a UNC path like C:/\/BudgetIT/\/Web/\/Deploy/\/Website.ps1 which should be accessible from the target machine.",
"    InlineScript: ${3:# Write your powershell commands here.Write-Output \"Hello World\"}  # Required ",
"    #ScriptArguments:  # Optional  # Arguments for the PowerShell script. Can be ordinal parameters or named parameters like -testParam test",
"    #InitializationScript:  # Optional  # Location of the data script for DSC on the target machines or on a UNC path like C:/\/BudgetIT/\/Web/\/Deploy/\/WebsiteConfiguration.ps1",
"    #SessionVariables:  # Optional  # Set common session variables for both the scripts. Variable assignments should be valid PowerShell statements.",
"    #CommunicationProtocol: # Options: 'Http', 'Https' # Optional  # Select the protocol to use for the WinRM service connection with the machine(s). Default is HTTPS.",
"    #AuthenticationMechanism: # Options: 'Default', 'Credssp' # Optional  # Select the authentication mechanism to be used for creating the pssession. For 'CredSSP' authentication, username and password fields are mandatory.",
"    #NewPsSessionOptionArguments:  # Optional  # Advanced options for remote session (New-PSSessionOption). For example, -SkipCACheck, -SkipCNCheck, -SkipRevocationCheck etc. For a complete list of all session options, see [this](https://aka.ms/Vsts_PS_TM_v3_NewPSSessionOptions)",
"    #ErrorActionPreference: # Options: 'stop', 'continue', 'silentlyContinue' # Optional  # Prepends the line `$ErrorActionPreference = 'VALUE'` at the top of your script.",
"    #failOnStderr:  # Optional  # If this is true, this task will fail if any errors are written to the error pipeline, or if any data is written to the Standard Error stream. Otherwise the task will rely on the exit code to determine failure.",
"    #ignoreLASTEXITCODE:  # Optional  # If this is false, the line `if ((Test-Path -LiteralPath variable:/\/LASTEXITCODE)) { exit $LASTEXITCODE }` is executed at the end of your script. This will cause the last exit code from an external command to be propagated as the exit code of powershell. Otherwise the line is not executed to the end of your script.",
"    #WorkingDirectory:  # Optional  # Working directory where the script is run.",
"    #RunPowershellInParallel:  # Optional  # Setting it to true will run the PowerShell scripts in parallel on the target machines.",
"$4"
],
"description": "Execute PowerShell scripts on remote machines using PSSession and Invoke-Command for remoting"
}
}
