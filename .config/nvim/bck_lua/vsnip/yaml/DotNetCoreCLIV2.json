{
".NET Core": {
"prefix": "adoDotNetCoreCLI2",
"body": [
"- task: DotNetCoreCLI@2",
"  inputs:",
"    command: ${1:build} # Options: 'build', 'push', 'pack', 'publish', 'restore', 'run', 'test', 'custom' # Required  # The dotnet command to run. Select 'Custom' to add arguments or use a command not listed here.",
"    publishWebProjects: ${2:true}  # Required  # If true, the task will try to find the web projects in the repository and run the publish command on them. Web projects are identified by presence of either a web.config file or wwwroot folder in the directory.",
"    #projects:  # Optional  # The path to the csproj file(s) to use. You can use wildcards (e.g. **/*.csproj for all .csproj files in all subfolders). **This field follows glob pattern, and is run against root of the repository at all times irrespective of Working Directory.**",
"    custom: $3  # Required when command = custom  # The command to pass to dotnet.exe for execution.",
"    #arguments:  # Optional  # Arguments to the selected command. For example, build configuration, output folder, runtime. The arguments depend on the command selected.",
"    #restoreArguments:  # Optional  # Write the additional arguments to be passed to **restore** command.",
"    #publishTestResults:  # Optional  # Enabling this option will generate a test results TRX file in `$(Agent.TempDirectory)` and results will be published to the server. <br>This option appends `--logger trx --results-directory $(Agent.TempDirectory)` to the command line arguments. <br><br>Code coverage can be collected by adding `--collect \"Code coverage\"` option to the command line arguments. This is currently only available on the Windows platform.",
"    #testRunTitle:  # Optional  # Provide a name for the test run.",
"    #zipAfterPublish:  # Optional  # If true, folder created by the publish command will be zipped.",
"    #modifyOutputPath:  # Optional  # If true, folders created by the publish command will have project's folder name prefixed to their folder names when output path is specified explicitly in arguments. This is useful if you want to publish multiple projects to the same folder.",
"    selectOrConfig: ${4:select} # Options: 'select', 'config' # Required  # You can either select a feed from Azure Artifacts and/or NuGet.org here, or commit a nuget.config file to your source code repository and set its path here.",
"    feedRestore: $5  # Required when selectOrConfig = select  # Include the selected feed in the generated NuGet.config. You must have Azure Artifacts installed and licensed to select a feed here.",
"    includeNuGetOrg: ${6:true}  # Required  # Include NuGet.org in the generated NuGet.config.",
"    nugetConfigPath: $7  # Required when selectOrConfig = config  # The NuGet.config in your repository that specifies the feeds from which to restore packages.",
"    #externalEndpoints:  # Optional  # Credentials to use for external registries located in the selected NuGet.config. For feeds in this organization/collection, leave this blank; the build’s credentials are used automatically.",
"    noCache: ${8:false}  # Required  # Prevents NuGet from using packages from local machine caches.",
"    packagesDirectory: $9  # Required  # Specifies the folder in which packages are installed. If no folder is specified, packages are restored into the default NuGet package cache.",
"    verbosityRestore: ${10:Detailed} # Options: '-', 'Quiet', 'Minimal', 'Normal', 'Detailed', 'Diagnostic' # Required  # Specifies the amount of detail displayed in the output.",
"    searchPatternPush: ${11:$(Build.ArtifactStagingDirectory)/*.nupkg}  # Required  # The pattern to match or path to nupkg files to be uploaded. Multiple patterns can be separated by a semicolon.",
"    nuGetFeedType: ${12:internal} # Options: 'internal', 'external' # Required ",
"    feedPublish: $13  # Required when command = push && nuGetFeedType = internal  # Select a feed hosted in this organization. You must have Azure Artifacts installed and licensed to select a feed here.",
"    #publishPackageMetadata:  # Optional  # Associate this build/release pipeline’s metadata (run #, source code information) with the package",
"    externalEndpoint: $14  # Required when command = push && nuGetFeedType = external  # The NuGet service connection that contains the external NuGet server’s credentials.",
"    searchPatternPack: ${15:**/*.csproj}  # Required  # Pattern to search for csproj or nuspec files to pack.You can separate multiple patterns with a semicolon, and you can make a pattern negative by prefixing it with '!'. Example: `**/*.csproj;!**/*.Tests.csproj`",
"    #configurationToPack:  # Optional  # When using a csproj file this specifies the configuration to package",
"    #outputDir:  # Optional  # Folder where packages will be created. If empty, packages will be created alongside the csproj file.",
"    #nobuild:  # Optional  # Don't build the project before packing. Corresponds to the --no-build command line parameter.",
"    #includesymbols:  # Optional  # Additionally creates symbol NuGet packages. Corresponds to the --include-symbols command line parameter.",
"    #includesource:  # Optional  # Includes source code in the package. Corresponds to the --include-source command line parameter.",
"    versioningScheme: ${16:off} # Options: 'off', 'byPrereleaseNumber', 'byEnvVar', 'byBuildNumber' # Required  # Cannot be used with include referenced projects. If you choose 'Use the date and time', this will generate a [SemVer](http://semver.org/spec/v1.0.0.html)-compliant version formatted as `X.Y.Z-ci-datetime` where you choose X, Y, and Z.If you choose 'Use an environment variable', you must select an environment variable and ensure it contains the version number you want to use.If you choose 'Use the build number', this will use the build number to version your package. **Note:** Under Options set the build number format to be '[$(BuildDefinitionName)_$(Year:yyyy).$(Month).$(DayOfMonth)$(Rev:.r)](https://go.microsoft.com/fwlink/?LinkID=627416)'.",
"    versionEnvVar: $17  # Required when versioningScheme = byEnvVar  # Enter the variable name without $, $env, or %.",
"    requestedMajorVersion: ${18:1}  # Required  # The 'X' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)",
"    requestedMinorVersion: ${19:0}  # Required  # The 'Y' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)",
"    requestedPatchVersion: ${20:0}  # Required  # The 'Z' in version [X.Y.Z](http://semver.org/spec/v1.0.0.html)",
"    #buildProperties:  # Optional  # Specifies a list of token = value pairs, separated by semicolons, where each occurrence of $token$ in the .nuspec file will be replaced with the given value. Values can be strings in quotation marks.",
"    verbosityPack: ${21:Detailed} # Options: '-', 'Quiet', 'Minimal', 'Normal', 'Detailed', 'Diagnostic' # Required  # Specifies the amount of detail displayed in the output.",
"    workingDirectory: $22  # Required when command != restore && command != push && command != pack  # Current working directory where the script is run. Empty is the root of the repo (build) or artifacts (release), which is $(System.DefaultWorkingDirectory). The project search pattern is **NOT** relative to working directory.",
"$23"
],
"description": "Build, test, package, or publish a dotnet application, or run a custom dotnet command"
}
}
